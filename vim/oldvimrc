" My personal .vimrc file!
" Mantained by Michele Esposito <micheleresposito@gmail.com>

"""""""""""""""""""""""""""""""""""""""""
" GENERAL SETTINGS!!!
"""""""""""""""""""""""""""""""""""""""""

set nocompatible                  " Must come first because it changes other options.

" call pathogen#infect()
silent! call pathogen#runtime_append_all_bundles()

syntax enable                     " Turn on syntax highlighting.
filetype plugin indent on         " Turn on file type detection.

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set guioptions-=T                 " hide toolbar
set fillchars=                    " emply splitbars"

set encoding=utf-8
set backspace=indent,eol,start    " Intuitive backspacing.

set hidden                        " Handle multiple buffers better.

"" COMPLETION""
set complete=.,b,u,]
set wildmenu                      " Enhanced command line completion.
set wildmode=longest,list:longest " Complete files like a shell.
set completeopt=menu,preview     

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set wrap                          " Turn on line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set visualbell                    " No beeping.

set rnu                           " relative line numbering
setglobal relativenumber

set autoread                      " automatically reloads a file"
"
set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set noswapfile
set directory=$HOME/.vim/tmp      " Keep swap files in one location

set tabstop=2                    " Global tab width.
set shiftwidth=2                 " And again, related.
set expandtab                    " Use spaces instead of tabs

set smarttab                      " insert tabs on the start of a line according to
                                  "    shiftwidth, not tabstop

set laststatus=2                  " Show the status line all the time

set history=1000                  " remember more commands and search history
set undolevels=1000    

map ; :
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>           

" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{fugitive#statusline()}%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

" Or use vividchalk

if has( "gui_macvim")
  colorscheme greenchalk 
else
  colorscheme lettuce 
endif

"""""""""""""""""""""""""""""""""""""""""
" MAPPINGS
"""""""""""""""""""""""""""""""""""""""""
"better visual
vnoremap < <gv
vnoremap > >gv

" fast splittiong
noremap ,v :vs<CR>
noremap ,h :sp<CR>

" Tab mappings.
map <leader>tt :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>to :tabonly<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprevious<cr>
map <leader>tf :tabfirst<cr>
map <leader>tl :tablast<cr>
map <leader>tm :tabmove


" remap for easier split window navigation
noremap <C-h> <C-w>h
noremap <C-t> <C-w>j
noremap <C-n> <C-w>k
noremap <C-l> <C-w>l

" remap for an easier navigation between sigle lines.
noremap j gj
noremap k gk

" Space to toggle folds.
nnoremap <Space> za
vnoremap <Space> za

" fast indentation
noremap + 5= 

" better shortcuts for spell check
"noremap <right> <C-}>
"noremap <left> <C-{>
noremap <right> ]s
noremap <left> [s
noremap | z=

" fast navigation
noremap K <S-Up>
noremap J <S-Down>
noremap <Up> <S-Up>
noremap <Down> <S-Down>

" deselect highlight
nmap <silent> ,/ :nohlsearch<CR>

" Quick yanking to the end of the line
nmap Y y$p

" Sudo to write
cmap w!! w !sudo tee % >/dev/null

"""""""""""""""""""""""""""""""""""""""""
" Plugins Settings
"""""""""""""""""""""""""""""""""""""""""

" ************************* Gundo    Settings ****************************
nnoremap ,9 :GundoToggle<CR>
" ************************* NERDTree Settings ****************************
" NERD commentor 
let NERDTreeShowBookmarks=1
let NERDTreeShowLineNumbers=1
set rnu
map <F1> :NERDTreeToggle<CR>         " toggle NERD tree

" ************************* ZoomWin! ****************************
noremap ,z    :ZoomWin<CR>

" ************************* A.vim! ****************************
nnoremap ,;     :A<CR>

au! BufEnter *.cpp,*.cxx,*.cc  let b:fswitchdst = 'h,hpp,tcc' | let b:fswitchlocs = './,ifrel:|/libs/|/incs/Bot2/|,reg:#libs#incs/Bot2'
au! BufEnter *.m,*.mm     let b:fswitchdst = 'h' | let b:fswitchlocs = './,ifrel:|/libs/|/incs/Bot2/|,reg:#libs#incs/Bot2'
au! BufEnter *.h,*.hpp    let b:fswitchdst = 'hh,cpp,cc,cxx,c,tcc,mm,m' | let b:fswitchlocs = './,ifrel:|/incs/Bot2/|/libs/|,reg:#incs/Bot2#libs'
au! BufEnter *.tcc        let b:fswitchdst = 'h,hpp,cpp' | let b:fswitchlocs = './,ifrel:|/incs/Bot2/|/libs/|,reg:#incs/Bot2#libs'
au! BufEnter *.hh         let b:fswitchdst = 'h' | let b:fswitchlocs = './,ifrel:|/libs/|/incs/Bot2/|,reg:#libs#incs/Bot2'

" ************************* Command-T *******************************
nnoremap ,t             :CommandT<CR>
nnoremap ,b             :CommandTBuffer<CR>

" ************************* Ctrl-P *******************************
let g:ctrlp_extensions = ['tag', 'buffertag', 'quickfix', 'dir', 'line', 'changes', 'undo']

let g:ctrlp_working_path_mode = 0
let g:ctrlp_cache_dir = $HOME.'/.vim/ctrlpcache/'
let g:ctrlp_open_multiple_files = '2vr'
let g:ctrlp_follow_symlinks = 0
let g:ctrlp_switch_buffer = 0
"set wildignore+=*/.git/*,*/.hg/*,*/.svn/*  " Linux/MacOSX impacts other plugins too
let g:ctrlp_custom_ignore = {
      \ 'dir':  '\.git$\|\.hg$\|\.svn$',
      \ 'file': '\.exe$\|\.so$\|\.dll$\|\.jpg$\|\.sw[po]$\|\.jpeg$\|\.png$\|\.mov$\|\.flv$\|\.tiff$\|\.tga$\|__Tagbar__$\|cscope.out$\|tags$\|\.defines$\|\.clang_complete$\|\.DS_Store$',
      \ }

if has("mac")
  let g:ctrlp_buftag_ctags_bin = '/usr/local/bin/ctags'
endif
"let g:ctrlp_map = '<c-p>'

nnoremap ,f             :CtrlP<CR>
nnoremap ,r             :CtrlPMRU<CR>
nnoremap ,e             :CtrlPCurFile<CR>
nnoremap ,q             :CtrlPQuickfix<CR>
nnoremap ,g             :CtrlPBufTag<CR>

nnoremap ,zr            :CtrlPReload<CR>
nnoremap ,za            :CtrlPTag<CR>
nnoremap ,zl            :CtrlPBufLine<CR>
nnoremap ,zh            :CtrlPChange<CR>

" ************************* YankRing   ****************************
nnoremap <silent> ,y  :YRShow<CR>
nnoremap <silent> ,ys :YRSearch<Space>

" ************************* Tags   ****************************
nnoremap <silent> ,k :TlistToggle<CR>

let g:tagbar_left=1
let g:tagbar_width=25
let g:tagbar_compact=1

if has("mac")
"  let Tlist_Ctags_Cmd='/usr/local/bin/ctags' " Specify ctag path. Used by taglist plugin
  let g:tagbar_ctags_bin = '/usr/local/bin/ctags'
  set csprg=/usr/local/bin/cscope
endif

let Tlist_Use_Right_Window = 0
let Tlist_WinWidth = 16
let Tlist_Inc_WinWidth = 1

nnoremap ,l           :TagbarOpenAutoClose<CR>

" ************************* C, C++ Settings *****************************
  iab cerr      std::cerr <<
  iab cout      std::cout <<
  iab endl      << std::endl;
if has("mac")
"  let Tlist_Ctags_Cmd='/usr/local/bin/ctags' " Specify ctag path. Used by taglist plugin
  let g:tagbar_ctags_bin = '/usr/local/bin/ctags'
  set csprg=/usr/local/bin/cscope
endif
nnoremap ,db            :CCTreeLoadDB<CR>
nnoremap ,dc            :CCTreeWindowToggle<CR>

" ************************* Powerline Settings *****************************
" ************************* Ack-Grep Settings *****************************

nnoremap ,s          :Ack<Space>

"""""""""""""""""""""""""""""""""""""""""
" FOLDINGS
"""""""""""""""""""""""""""""""""""""""""

" For the MakeGreen plugin and Ruby RSpec. Uncomment to use.
autocmd BufNewFile,BufRead *_spec.rb compiler rspec

set whichwrap=b,s,h,l,<,>,~,[,] " everything wraps
"             | | | | | | | | |
"             | | | | | | | | +-- "]" Insert and Replace
"             | | | | | | | +-- "[" Insert and Replace
"             | | | | | | +-- "~" Normal
"             | | | | | +-- <Right> Normal and Visual
"             | | | | +-- <Left> Normal and Visual
"             | | | +-- "l" Normal and Visual (not recommended)
"             | | +-- "h" Normal and Visual (not recommended)
"             | +-- <Space> Normal and Visual
"             +-- <BS> Normal and Visual

" Folding
set foldenable  " turn on folding
set foldmarker={,} "" Fold C style code (only use this as default                       " if you use a high foldlevel134   

set foldlevel=100 " Don't autofold anything (but I can still
                       " fold manually)
set foldopen=block,hor,mark,percent,quickfix,tag " what movements
                                                       " open folds
                                                       "
" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>="
" Folding ----------------------------------------------------------------- {{{

set foldlevelstart=0

" automatically saves folds and loads them

au BufWinLeave * mkview
au BufWinEnter * silent loadview
au BufWinLeave * silent! mkview
au BufWinEnter * silent! loadview
" Make zO recursively open whatever top level fold we're in, no matter where the
" cursor happens to be.
nnoremap zO zCzO

" Use ,z to "focus" the current fold.
nnoremap <leader>z zMzvzz

" fold function
function! MyFoldText() " {{{
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
    return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
endfunction " }}}
set foldtext=MyFoldText()

"""""""""""""""""""""""""""""""""""""""""
" SPELL CHECKING
""""""""""""""""""""""""""""""""""""""""" 
if v:version >= 700
    "Sets in-line spellchecking
    " set spell
 
    " Set local language 
    setlocal spell spelllang=en_us
    "setlocal spell spelllang=da

endif
"""""""""""""""""""""""""""""""""""""""""
" Syntax
"""""""""""""""""""""""""""""""""""""""""
au! BufRead,BufNewFile *.json set filetype=json

"""""""""""""""""""""""""""""""""""""""""
" LATEX!
"""""""""""""""""""""""""""""""""""""""""
" Settings for latex-suite

" Used for Vim Latex
map <C-p> <F7>

let g:tex_flavor='latex'
set grepprg=grep\ -nH\ $*

